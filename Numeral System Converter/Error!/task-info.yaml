type: edu
custom_name: stage6
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;

    class Clue {
        final String input;
        String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends BaseStageTest<Clue> {

        public ConverterTest() throws Exception {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("a b\n\n\n", null, true),
                testToAnswer("11\nabc\n\n", null, true),
                testToAnswer("11\n1\ndas\n", null, true),
                testToAnswer("0\n1\ndas\n", null, true),
                testToAnswer("37\n1\ndas\n", null, true),
                testToAnswer("36\n1\n0\n", null, true),
                testToAnswer("36\n1\n37\n", null, true),

                /* Tests without a hint: */
                testToAnswer("c\n\n\n", null, false),
                testToAnswer("12\nbc\n\n", null, false),
                testToAnswer("12\n1\nhf\n", null, false),
                testToAnswer("0\n2\nhf\n", null, false),
                testToAnswer("37\n2\nhf\n", null, false),
                testToAnswer("14\n2\n-1\n", null, false),
                testToAnswer("14\n2\n38\n", null, false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n0.234\n7", "0.14315", true),
                testToAnswer("10\n10.234\n7", "13.14315", true),
                testToAnswer("6\n2.555\n1", "11", true),
                testToAnswer("35\naf.xy\n17", "148.g88a8", true),
                testToAnswer("10\n11\n2", "1011", true),
                testToAnswer("16\naaaaa.0\n24", "22df2.00000", true),
                testToAnswer("16\n0.cdefb\n24", "0.j78da", true),
                testToAnswer("16\naaaaa.cdefb\n24", "22df2.j78da", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n0.2340\n7", "0.14315", false),
                testToAnswer("10\n10.2340\n7", "13.14315", false),
                testToAnswer("6\n2.5550\n1", "11", false),
                testToAnswer("35\naf.xy0\n17", "148.g88a8", false),
                testToAnswer("10\n12\n2", "1100", false),
                testToAnswer("16\naaaaa.00\n24", "22df2.00000", false),
                testToAnswer("16\n0.cdefb0\n24", "0.j78da", false),
                testToAnswer("16\naaaaa.cdefb0\n24", "22df2.j78da", false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            String answer = lines[lines.length - 1];

            if (clue.answer == null) {
                if (answer.toLowerCase().contains("error")) {
                    return new CheckResult(true);
                } else if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error."
                    );
                }
            }

            answer = answer.replaceAll("[^\\p{Graph}]", "");
            clue.answer = clue.answer.replaceAll("[^\\p{Graph}]", "");

            answer = removeEndZeros(answer);
            clue.answer = removeEndZeros(clue.answer);

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input."
                    );
                }
            }

            return new CheckResult(true);
        }

        private String removeEndZeros(String number) {
            if (!number.contains(".")) {
                return number;
            }
            while (number.endsWith("0")) {
                number = number.substring(0, number.length() - 1);
            }
            if (number.endsWith(".")) {
                number = number.substring(0, number.length() - 1);
            }
            return number;
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello world!");
        }
    }
  learner_created: false
- name: src/converter/Converter.java
  visible: true
  text: |
    package converter;

    public class Converter {
        private final int minRadix;
        private final int maxRadix;
        private final String alphabet;

        public Converter() {
            this(1, 36, "0123456789abcdefghijklmnopqrstuvwxyz");
        }

        public Converter(int minRadix, int maxRadix, String alphabet) {
            if (maxRadix > alphabet.length()) {
                String message = String.format("The maximum radix is greater than the length of the alphabet: %d > %d.",
                        maxRadix, alphabet.length());
                throw new IllegalArgumentException(message);
            } else if (minRadix > maxRadix) {
                String message = String.format("The minimum radix is greater than the maximum radix: %d > %d.",
                        minRadix, maxRadix);
                throw new IllegalArgumentException(message);
            }
            this.minRadix = minRadix;
            this.maxRadix = maxRadix;
            this.alphabet = alphabet;
        }

        public String convert(String source, int sourceRadix, int targetRadix) {
            requireRadixInRange(sourceRadix);
            requireRadixInRange(targetRadix);
            if (sourceRadix == 1 || targetRadix == 1) {
                return convertByOne(source, sourceRadix, targetRadix);
            } else if (source.contains(".")) {
                String[] number = source.split("\\.");
                String integerPart = number[0];
                int integer = convertToDecimal(integerPart, sourceRadix);
                String convertedInteger = convertFromDecimal(integer, targetRadix);
                String fractionalPart = number[1];
                double fraction = getFraction(fractionalPart, sourceRadix);
                String convertedFraction = convertFromFraction(fraction, targetRadix);
                return convertedInteger + "." + convertedFraction;
            } else {
                int decimal = convertToDecimal(source, sourceRadix);
                return convertFromDecimal(decimal, targetRadix);
            }
        }

        public String convertByOne(String source, int sourceRadix, int targetRadix) {
            String[] number = source.split("\\.");
            String integerPart = number[0];
            int integer;
            if (sourceRadix == 1) {
                integer = integerPart.length();
            } else {
                integer = convertToDecimal(integerPart, sourceRadix);
            }
            if (targetRadix == 1) {
                return "1".repeat(Math.max(0, integer));
            } else {
                return convertFromDecimal(integer, targetRadix);
            }
        }

        private void requireRadixInRange(int radix) {
            if (radix < minRadix) {
                String message = String.format("The radix is less than the minimum radix: %d < %d.",
                        radix, minRadix);
                throw new IllegalArgumentException(message);
            } else if (radix > maxRadix) {
                String message = String.format("The radix is greater than the maximum radix: %d > %d.",
                        radix, maxRadix);
                throw new IllegalArgumentException(message);
            }
        }

        public int convertToDecimal(String source, int sourceRadix) {
            char[] members = source.toCharArray();
            int sum = 0;
            for (int i = 0, n = members.length - 1; i <= n; i++) {
                char member = members[i];
                int value = getValueFromAlphabet(member);
                int power = (int) Math.pow(sourceRadix, n - i);
                int multi = value * power;
                sum += multi;
            }
            return sum;
        }

        public String convertFromDecimal(int source, int targetRadix) {
            StringBuilder builder = new StringBuilder();
            int remainder;
            int dividend = source;
            do {
                remainder = dividend % targetRadix;
                char member = getMemberFromAlphabet(remainder);
                builder.append(member);
            } while ((dividend /= targetRadix) >= targetRadix);
            if (dividend != 0) {
                builder.append(getMemberFromAlphabet(dividend));
            }
            return builder.reverse().toString();
        }

        public String convertFromFraction(double source, int targetRadix) {
            double multiplier = source;
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < 5; i++) {
                multiplier *= targetRadix;
                int value = (int) multiplier;
                char member = getMemberFromAlphabet(value);
                builder.append(member);
                String string = String.valueOf(multiplier);
                int index = string.indexOf('.');
                String fraction = string.substring(index + 1);
                multiplier = Double.parseDouble("0." + fraction);
            }
            return builder.toString();
        }

        private int getValueFromAlphabet(char member) {
            int index = alphabet.indexOf(member);
            if (index >= 0) {
                return index;
            } else {
                String message = String.format("The alphabet doesn't contain member: '%s'.", member);
                throw new IllegalArgumentException(message);
            }
        }

        private char getMemberFromAlphabet(int value) {
            if (value >= 0 && value < alphabet.length()) {
                return alphabet.charAt(value);
            } else {
                String message = String.format("The value is greater than or equal to the length of the alphabet: %d >= %d.",
                        value, alphabet.length());
                throw new IllegalArgumentException(message);
            }
        }

        public double getFraction(String source, int sourceRadix) {
            char[] members = source.toCharArray();
            double sum = 0.0;
            for (int i = 0, n = members.length; i < n; i++) {
                char member = members[i];
                double value = getValueFromAlphabet(member);
                double power = (int) Math.pow(sourceRadix, i + 1);
                sum += value / power;
            }
            return sum;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/219/implement
status: Solved
record: -1
